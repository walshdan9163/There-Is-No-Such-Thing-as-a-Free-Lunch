{"version":3,"sources":["components/menu.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["defaultCost","name","cost","totalIndMealCost","Menu","useState","costs","setCosts","totalMealCost","setTotalMealCost","prorate","setProrate","handleCostsChange","event","_tempCosts","target","dataset","id","value","handleFocus","select","Container","Row","Col","className","type","onFocus","onChange","parseFloat","check","checked","Table","bordered","hover","map","item","index","key","data-id","Button","onClick","prevCosts","fetch","method","headers","body","JSON","stringify","prorateChoice","individualCosts","then","response","json","data","CalculateValues","values","Footer","fluid","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.46c2bf9f.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport '../css/menu.css';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction CalculateValues(prorate, totalMealCost, costs){\r\n  return fetch('/api/calculate', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({prorateChoice: prorate, totalMealCost: totalMealCost, individualCosts: costs}),\r\n  })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      return data;\r\n    })\r\n}\r\n\r\nconst defaultCost = [\r\n  {\r\n    name: \"Name\",\r\n    cost: 0,\r\n    totalIndMealCost: 0\r\n  }\r\n];\r\n\r\nfunction Menu() {\r\n\r\n  const [costs, setCosts] = useState(defaultCost);\r\n  const [totalMealCost, setTotalMealCost] = useState(0);\r\n  const [prorate, setProrate] = useState(0);\r\n  const [totalIndMealCosts, setTotalIndMealCosts] = useState(defaultCost);\r\n\r\n  const calculateCosts = () => {\r\n    const prorated = prorate;\r\n    CalculateValues(prorated, totalMealCost, costs)\r\n      .then(values => {\r\n        setCosts(values.costs);\r\n      });\r\n  }\r\n\r\n  const handleCostsChange = event => {\r\n    const _tempCosts = [...costs];\r\n    _tempCosts[event.target.dataset.id][event.target.name] = event.target.value;\r\n\r\n    setCosts(_tempCosts);\r\n  };\r\n\r\n  const handleTotalMealCostChange = event => {\r\n    setTotalMealCost(parseFloat(event.target.value));\r\n  }\r\n\r\n  const handleProrateChange = event => {\r\n    setProrate(event.target.checked);\r\n  }\r\n\r\n  const addNewCost = () => {\r\n    setCosts(prevCosts => [...prevCosts, {name: \"Name\", cost: 0, totalIndMealCost: 0}]);\r\n  };\r\n\r\n  const handleFocus = event => {\r\n    event.target.select();\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <div className=\"total-meal-cost\">\r\n            <h3>\r\n              Total Meal Cost:\r\n            </h3>\r\n            <input\r\n              name=\"totalMealCost\"\r\n              type=\"number\"\r\n              value={totalMealCost}\r\n              onFocus={handleFocus}\r\n              onChange={handleTotalMealCostChange}\r\n            />\r\n          </div>\r\n        </Col>\r\n        <Col>\r\n          <div className=\"prorate\">\r\n              <h3>\r\n                Prorate?*\r\n              </h3>\r\n              <input\r\n                name=\"prorate\"\r\n                type=\"checkbox\"\r\n                check={prorate.checked}\r\n                onChange={handleProrateChange}\r\n              />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <div>\r\n        <Table bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>Participant Name</th>\r\n              <th>Meal Cost</th>\r\n              <th>Total Meal Cost</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"scrollable-table\">\r\n            {costs.map((item, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  <input\r\n                    name=\"name\"\r\n                    data-id={index}\r\n                    type=\"text\"\r\n                    value={item.name}\r\n                    onFocus={handleFocus}\r\n                    onChange={handleCostsChange}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    name=\"cost\"\r\n                    data-id={index}\r\n                    type=\"number\"\r\n                    value={item.cost}\r\n                    onFocus={handleFocus}\r\n                    onChange={handleCostsChange}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    name=\"totalIndMealCost\"\r\n                    data-id={index}\r\n                    type=\"number\"\r\n                    value={item.totalIndMealCost}\r\n                    onFocus={handleFocus}\r\n                    onChange={handleCostsChange}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      \r\n      <div className=\"add-participant-button\">\r\n        <Button onClick={addNewCost}>Add Participant</Button>\r\n      </div>\r\n      <div>\r\n        <Button onClick={calculateCosts}>Calculate Individual Costs</Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction Footer(){\r\n    return (\r\n        <Container fluid className=\"footer\">\r\n            <h5>*Prorating means that tips and fees will be split proportionally to meal cost, rather than evenly distributed among participants.</h5>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './css/App.css';\r\nimport Menu from './components/menu';\r\nimport Footer from './components/footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>There Is No Such Thing as a Free Lunch</h1>\r\n      </header>\r\n      <div>\r\n        <Menu />\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}